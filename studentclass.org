:PROPERTIES:
:ID:       f2c83780-0ee1-4935-9d32-043623fa6ad0
:END:
#+title: StudentClass
[[id:9a465709-df21-4e37-9c16-efd2e9244729][ECGR2104: Notes]]

#+begin_src cpp
#include <iostream>
#include <vector>

using namespace std;

class Student {
    public:
    string name;

    void setId(int i){
      if(i < 800000000){
        cout << "Invalid ID assignment." << endl;



      }
    }

    // This is called a mutator -- prevents user from being able to use the program incorrectly
    void setGpa(double g){
      if(g > 4.0 || g < 0.0){
        cout << "Invalid GPA assigment." << endl;
        gpa = -1.0;
        return;
      }
      gpa = g;
    }

    double getGpa(){
      return gpa;
    }

    void print(){
        cout << name << " " << gpa << " " << " " << id << endl;
    }

    private:
    double gpa;
    int id;
};

int main(){

    Student s;
    s.name = "Bob";
    s.setGpa(4.0);
    s.id = 801123124;

    Student s2;
    s2.name = "Joe";
    s2.setGpa(2.0);
    s2.id = 801123125;

    s.print();
    s2.print();

    /*
    vector<string> name = {"Bob", "Joe"};
    vector<double> gpa = {4.0, 3.0};
    vector<int> id = {801123124, 801123125};

    name.push_back("Sam");
    id.push_back(801123123);

    cout << "Welcome to the Student Database Application." << endl;
    unsigned int userInput = 0;
    do{
        cout << "What do you want to do?" << endl;
        cout << "1: Print Student List" << endl;
        cout << "2: Add new student" << endl;
        cout << "3: Quit" << endl;
        cin >> userInput;

        string tempName;
        int tempId;
        double tempGpa;
        switch(userInput){
            case 1:
                for(int i = 0; i < name.size(); i++){
                    cout << "Name: " << name.at(i) << ", GPA: " << gpa.at(i) << ", ID: " << id.at(i) << endl;
                }
                break;
            case 2:
                cout << "Enter the student's name: " << endl;
                cin >> tempName;
                cout << "Enter the student's GPA: " << endl;
                cin >> tempGpa;
                cout << "Enter the student's ID: " << endl;
                cin >> tempId;

                name.push_back(tempName);
                gpa.push_back(tempGpa);
                id.push_back(tempId);
                break;
            case 3:
                cout << "Exiting application." << endl;
                break;
            default:
                cout << "Unrecognized input." << endl;
                break;
        }
    } while(userInput != 3);
    */
    /*
    // Array solution:
    const unsigned int SIZE = 1000;
    unsigned int num_students = 1;
    string name[SIZE];
    double gpa[SIZE];
    int id[SIZE];

    name[0] = "Sam";
    gpa[0] = 2.4;
    id[0] = 801123123;

    cout << "Welcome to the Student Database Application." << endl;
    unsigned int userInput = 0;
    do{
        cout << "What do you want to do?" << endl;
        cout << "1: Print Student List" << endl;
        cout << "2: Add new student" << endl;
        cout << "3: Quit" << endl;
        cin >> userInput;

        string tempName;
        int tempId;
        double tempGpa;
        switch(userInput){
            case 1:
                for(int i = 0; i < num_students; i++){
                    cout << "Name: " << name[i] << ", GPA: " << gpa[i] << ", ID: " << id[i] << endl;
                }
                break;
            case 2:
                if(num_students == SIZE){
                    cout << "Out of memory! Unable to add new student." << endl;
                    break;
                }
                cout << "Enter the student's name: " << endl;
                cin >> tempName;
                cout << "Enter the student's GPA: " << endl;
                cin >> tempGpa;
                cout << "Enter the student's ID: " << endl;
                cin >> tempId;

                name[num_students] = tempName;
                gpa[num_students] = tempGpa;
                id[num_students] = tempId;

                num_students++;
                break;
            case 3:
                cout << "Exiting application." << endl;
                break;
            default:
                cout << "Unrecognized input." << endl;
                break;
        }
    } while(userInput != 3);
    */

    return 0;
}
#+end_src
