:PROPERTIES:
:ID:       921e8c35-0907-4a16-93b6-caf48821e3dd
:END:
#+title: HeapsMedian
#+filetags: Homework

#+OPTIONS: toc:nil
#+begin_export latex
\clearpage
#+END_EXPORT

* Problem Description
* Solution Description
* Initial Attempt to Code the Solution
* Testing Description
* Code & Testing
#+begin_src cpp
#include <iostream>
#include <queue>
using namespace std;

class MedianFinder {
    public:

    priority_queue<int> maxQueue;
    priority_queue<int, vector<int>, greater<int>> minQueue;

    MedianFinder(){

    }

    void addNum(int num) {

        if(maxQueue.empty() || num < maxQueue.top()){
            maxQueue.push(num);
        } else {
            minQueue.push(num);
        }

        if(maxQueue.size() > minQueue.size()) {
            int temp = maxQueue.top();
            maxQueue.pop();
            minQueue.push(temp);
        } else if (minQueue.size() > maxQueue.size()) {
            int temp = minQueue.top();
            minQueue.pop();
            maxQueue.push(temp);
        }

    }

    double findMedian() {
        int num;
        if(maxQueue.size() == minQueue.size() && !maxQueue.empty() && !minQueue.empty()) {
            return double(maxQueue.top() + minQueue.top()) / (maxQueue.size() + minQueue.size());
        } else if (minQueue.size() > maxQueue.size()) {
            return minQueue.top();
        } else if (maxQueue.size() > minQueue.size()) {
            return maxQueue.top();
        } else {
            return 0.0;
        }
    }
};
#+end_src
