:PROPERTIES:
:ID:       31f59439-6470-4c9d-af5b-0982b47a943b
:END:
#+title: DoublyLinkedListClass
#+filetags:Projects

/Theory: [[id:d085c6f6-4c83-44e1-9fa3-cb70ec2e1094][Linked Lists]]/

* Procedure
** Part1: The Essentials

~You will create a class to manage a doubly linked list of integers. Your class should only have public member functions and member variables only accessible through accessors and mutators. Each node in the list should be represented by a class or struct containing the data element, a pointer to the previous element, and a pointer to the next element. The list class should contain pointers to the head and tail of the list.~

/Your class should implement the following public member functions:/
#+begin_src cpp
void push(int data); // appends a new node on the end of the list

void pop(); // removes the last element of the list

int size(); // returns the number of elements in the list

void print(); // prints all elements in the list to the console

int& at(int idx); // returns a reference to the data at the requested index, "idx"
#+end_src

** Part2: Linked Lists Specialty Functions

/Extend the functionality of your class with the following functions:/
#+begin_src cpp
void insert(int data, int pos); // inserts a new node containing data at the position "pos" in the list. All elements at that position are then shifted forward. (example: you have the following list: {5, 7, 2}. You call list.insert(3, 1) to put a 3 at position 1 (the second element, remember computers count starting at 0). Your list should then contain: {5, 3, 7, 2})

void remove(int pos); // removes the element at the specified position
#+end_src

** Part3: The Final Touches

~Add a destructor to your class that cleans up any data allocated via "new" to prevent memory leaks. Add copy constructors and override the copy assignment operator to prevent shallow copies. Extend your class to a "template" class so that you can use any data type, rather than just integers to hold data.~

** Requirements

+ The code should be well formatted with proper indentation, variable names, and function structure
+ The Node Class/Struct is properly defined
  * node contains members for the data, a pointer to the next node, and a pointer to the previous node
+ The Doubly Linked List Class is properly defined
  * The class manages pointers to the head, tail, and contains all members and functions described in the description section
+ The push function properly appends a new node to the end of the list
+ The pop function properly removes a node from the end of the list
+ The size function returns the number of elements in the list
+ The insert function properly adds a new node at the specified index within the list, according to the behavior described in the description
+ The remove function properly removes a node at the specified index
+ The class should properly handle "garbage collection"
  * when the class goes out of scope, no data created on the heap associated with this class should still be allocated
+ the class should properly handle "shallow copies"
+ when the class is copied through a copy assignment or copy constructor, it should properly re-allocate and copy data for the new linked list class
+ (Bonus) The class should be modified to handle all types of data (other than just int) through the use of a template class
  * All data "int" instances in the class should be replaced with a templated variable

* Code .h
#+begin_src C
#ifndef DOUBLY_LINKED_LIST_H
#define DOUBLY_LINKED_LIST_H

#include <iostream>

template <typename J>
class DoublyLinkedList {
    private:
        struct Node{
            J data;
            Node* prev;
            Node* next;
            Node(const J& val){
                data = val;
                prev = nullptr;
                next = nullptr;
            }
        };

    int count;
    Node* head;
    Node* tail;

    void copyFrom(const DoublyLinkedList& other){
        Node* current = other.head;
        while (current) {
            push(current->data);
            current = current->next;
        }
    }

    void clear(){
        while (head){
            Node* temp = head;
            head = head->next;
            delete temp;
        }
        tail = nullptr;
        count = 0;
    }

    public:
        DoublyLinkedList(){
            count = 0;
            head = nullptr;
            tail = nullptr;
        }

        DoublyLinkedList(const DoublyLinkedList& other){
            count = 0;
            head = nullptr;
            tail = nullptr;
            copyFrom(other);
        }

        DoublyLinkedList& operator=(const DoublyLinkedList& other){
            if (this != & other) {
                clear();
                copyFrom(other);
            }
            return *this;
        }

        ~DoublyLinkedList(){
            clear();
        }

        void push(const J& data){
            Node* node = new Node(data);
            count++;
            if (head == nullptr){
                head = node;
                tail = node;
                return;
            }

            tail->next = node;
            node->prev = tail;
            tail = node;
        }

        void pop(){
            if (tail == nullptr) return;

            Node* toDelete = tail;

            if (tail->prev){
                tail = tail->prev;
                tail->next = nullptr;
            } else {
                head = nullptr;
                tail = nullptr;
            }

            delete toDelete;
            count--;
        }

        int size(){
            return count;
        }

        void print(){
            Node* current = head;

            while (current) {
                std::cout << current->data << " ";
                current = current->next;
            }

            std::cout << std::endl;
        }

        J& at(int idx) {
            if (idx < 0 || idx >= count) {
                std::cout << "Index out of range\n";
                std::exit(1);
        }

            Node* current = head;
                for (int i = 0; i < idx; i++) current = current->next;
                return current->data;
        }

        void insert(const J& data, int pos){
            if (pos < 0 || pos > count) return;
            if (pos == count) {
                push(data);
                return;
            }

            Node* current = head;
            for(int i = 0; i < pos; i++){
                current = current->next;
            }

            Node* node = new Node(data);
            node->next = current;
            node->prev = current->prev;

            if (current->prev){
                current->prev->next = node;
            } else{
                head = node;
            }

            current->prev = node;
        }

        void remove(int pos){
            if (pos <  0 || pos >= count) return;

            Node* current = head;
            for (int i = 0; i < pos; i++){
                current = current->next;
            }

            if (current->prev){
                current->prev->next = current->next;
            } else{
                head = current->next;
            }

            if (current->next){
                current->next->prev = current->prev;
            } else{
                tail = current->prev;
            }

            delete current;
            count--;
        }

};

#endif

#+end_Src
