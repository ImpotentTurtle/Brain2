:PROPERTIES:
:ID:       bc331d18-5edf-4b47-ab26-c801a6a8c97d
:END:
#+title: SurvivalGame
#+filetags:Projects

* Procedure

* Code
#+begin_src cpp
#include <iostream>
#include <sstream>
#include <time.h>

using namespace std;

class Player {
    public:
    Player(int x, int y){
        health = MAX_HEALTH;
        hunger = MAX_HUNGER;
        thirst = MAX_THIRST;

        this->x = x;
        this->y = y;
        this->score = 0;
    }

    int getScore() const {
        return score;
    }

    void takeDamage(int val){
        this->health -= val;
        if(this->health < 0) this->health = 0;
    }

    void takeTurn(){
        this->thirst--;
        this->hunger--;

        if(this->thirst <= 0){
            this->health--;
            this->thirst = 0;
        }

        if(this->hunger <= 0){
            this->health--;
            this->hunger = 0;
        }

        this->score++;
    }

    string getStats() const {
        stringstream ss;
        ss  << "============\n"
            << "Health: " << this->health << "\n"
            << "Hunger: " << this->hunger << "\n"
            << "Thirst: " << this->thirst << "\n"
            << "============\n";
        return ss.str();
    }

    bool isAlive() const {
        return this->health > 0;
    }

    void increaseThrist(int val){
        this->thirst += val;
        if(this->thirst > MAX_THIRST) this->thirst = MAX_THIRST;
    }

    void increaseHunger(int val){
        this->hunger += val;
        if(this->hunger > MAX_HUNGER) this->hunger = MAX_HUNGER;
    }

    int x, y;
    private:
    int health, hunger, thirst, score;
    const int MAX_HEALTH = 3;
    const int MAX_HUNGER = 5;
    const int MAX_THIRST = 3;
};

class Land {
    public:
    virtual string getDescription() = 0;
    virtual string visit(Player& player) = 0;
    virtual ~Land() {}
};

class Forest : public Land {
    public:
    string getDescription(){
        return "a densely wooded forest.";
    }

    string visit(Player& player){
        int randomNum = rand() % 100;

        if(randomNum > 74){
            player.takeDamage(1);
            return "You are attacked by a bear while foraging for berries.";
        } else {
            player.increaseHunger(1);
            return "You forage for berries in the woods and eat a few.";
        }
    }
};

class Lake : public Land {
    public:
    string getDescription(){
        return "a clear sparkling lake.";
    }

    string visit(Player& player){
        player.increaseThrist(2);
        return "You visit the lake and drink its clean water";
    }
};

class Desert : public Land {
public:
  string getDescription(){
    return "a arid, brutal desert.";
  }

  string visit(Player& player){
    int randomNum = rand()% 100;
    if(randomNum > 70) {
      player.takeDamage(1);
      return "You grow thirsty, as the scorching sun beats down on your neck";
    } else {
      player.increaseThrist(1);
      return "You find shade among an oasis; you rest.";
    }
  }
};


class Mountain : public Land{
public:
  string getDescription(){
    return "a range of soaring mountains.";
  }
  string visit(Player& player){
    int randomNum = rand() % 100;
    if (randomNum > 80) {
      player.takeDamage(1);
      return "A rock gives way and you slip, injuring yourself.";
    } else {
      player.increaseHunger(1);
      return "You find some high altitude fruit to eat.";
    }
  }
};

class Town : public Land {
public:
  string getDescription() {
    return "a withering town. The name long forgotten.";
  }

  string visit(Player& player) {
    int randomNum = rand() % 100;
    if(randomNum > 90){
      player.takeDamage(100);
        return "As you round a corner, you find yourself, not within a town. But in a void. Incomprehensible geometry and flesh without bound surrounds you. You weren't meant to come to this place. The towns-people have found their god, and you exist with out his permission.";
    } else {
      player.increaseHunger(2);
      player.increaseThrist(1);
      return "You find some water and food, yet you feel an unease in the air. You rush away.";

    }
  }
};

const int MAP_SIZE = 10;
Land* map[MAP_SIZE][MAP_SIZE];

int wrap(int value){
    return (value + MAP_SIZE) % MAP_SIZE;
}

void populateMap(){
    for(int i = 0; i < MAP_SIZE; i++){
        for(int j = 0; j < MAP_SIZE; j++){
            int randomNum = rand() % 5;
            switch(randomNum){
                case 0: // Forest
                  map[i][j] = new Forest;
                  break;
                case 1: // Lake
                  map[i][j] = new Lake;
                  break;
                case 2:
                  map[i][j] = new Desert;
                  break;
                case 3:
                  map[i][j] = new Mountain;
                  break;
                case 4:
                  map[i][j] = new Town;
                  break;
                default:
                  cout << "Invalid land type selected" << endl;
                  break;
            }
        }
    }
}

int main(){
    srand(time(0));

    populateMap();

    Player player(MAP_SIZE/2, MAP_SIZE/2);

    cout << "You wake up and find yourself lost in the middle of a strange wilderness." << endl;

    while(player.isAlive()){
        cout << "To the north you see " << map[player.x][wrap(player.y - 1)]->getDescription() << endl;
        cout << "To the east you see " << map[wrap(player.x + 1)][player.y]->getDescription() << endl;
        cout << "To the south you see " << map[player.x][wrap(player.y + 1)]->getDescription() << endl;
        cout << "To the west you see " << map[wrap(player.x - 1)][player.y]->getDescription() << endl;

        cout << "Which way will you go? Enter N, E, S, or W:" << endl;
        char userInput;
        cin >> userInput;

        if(userInput >= 'a' && userInput <= 'z'){
            userInput = userInput - 'a' + 'A';
        }

        switch(userInput){
            case 'N':
                player.y = wrap(player.y - 1);
                break;
            case 'E':
                player.x = wrap(player.x + 1);
                break;
            case 'S':
                player.y = wrap(player.y + 1);
                break;
            case 'W':
                player.x = wrap(player.x - 1);
                break;
            default:
                cout << "There is no path that way, try again" << endl;
                continue;
        }

        cout << map[player.x][player.y]->visit(player) << endl;

        cout << player.getStats() << endl;
        player.takeTurn();
    }

    cout << "You died." << endl;
    cout << player.getScore() << endl;


    return 0;
}

#+end_src
